#ifndef FIEL_ALERT_HELPER_HPP
#define FIEL_ALERT_HELPER_HPP

#include "numericHelper.h"
#include <json.hpp>
#include <string>
#include <type_traits>

namespace FieldAlertHelper
{

    /**
     * @brief Utility function to fill empty strings or zero numeric values with default placeholders.
     *
     * This function is a helper to ensure that certain fields, such as strings and doubles,
     * are not left empty or set to zero. It returns either the original value or a default
     * placeholder depending on the input type and value.
     *
     * - For `std::string` types, it returns `"-"` if the string is empty, otherwise it returns the original string.
     * - For `double` types, it returns `-1` if the value is zero (rounded to two decimal places), otherwise it
     * returns the original value.
     *
     * The return type is compatible with `nlohmann::json`, making this function useful for
     * preparing data for JSON serialization.
     *
     * @tparam T The type of the field being checked, either `std::string` or `double`.
     * @param field The field value to check and potentially modify.
     * @return nlohmann::json A JSON-compatible value: either the original field value or a default placeholder.
     *
     * @throws std::runtime_error If the field type is unsupported.
     */
    template<typename T>
    nlohmann::json fillEmptyOrNegative(const T& field)
    {
        if constexpr (std::is_same_v<std::decay_t<T>, std::string>)
        {
            // Return "-" if the string is empty, otherwise return the original string
            return field.empty() ? "-" : field;
        }
        else if constexpr (std::is_same_v<std::decay_t<T>, double>)
        {
            // Return -1.0 if the double value rounds to zero, otherwise return the original value
            return (Utils::floatToDoubleRound(field, 2) == 0) ? -1 : field;
        }
        else
        {
            // Throw an exception if an unsupported type is passed to the function
            throw std::runtime_error("Unsupported type for fillEmptyOrNegative");
        }
    }

} // namespace FieldAlertHelper

#endif // FIELD_ALERT_HELPER_HPP
